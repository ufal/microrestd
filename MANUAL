MicroRestD
Version 1.2.3

Introduction
============

MicroRestD is a small C++11 cross-platform REST server built on top of
libmicrohttpd (http://www.gnu.org/software/libmicrohttpd/). It is released under
MPL 2.0 license (http://www.mozilla.org/MPL/2.0/) and is versioned using
Semantic Versioning (http://semver.org/).

Apart from the REST server it contains classes for producing JSON, producing XML
and also pugixml (http://pugixml.org/) library for XML parsing and manipulation.

The supported platforms are Linux, OS X and Windows, supported compilers are
gcc, clang, tdm-gcc on Windows and Visual C++ 2013 or later on Windows.

Copyright 2015 by Institute of Formal and Applied Linguistics, Faculty of
Mathematics and Physics, Charles University in Prague, Czech Republic.

MicroRestD repository http://github.com/ufal/microrestd is hosted on GitHub.


MicroRestD Operations
=====================

MicroRestD provides a simple REST server. The server supports HEAD, GET, POST,
PUT and DELETE methods and automatic parsing of query strings and POST
application/x-www-form-urlencoded and multipart/form-data request bodies.

Linux, OS X and Windows systems are supported (although only select is supported
on Windows, while poll is used on Linux and OS X).

Each request is processed by a new thread by default, but it is possible to use
a thread pool. Classes for generating JSON and XML responses are provided.
Responses can be generated progressively, so multiple responses can be processed
simultaneously by one thread.

Internally, libmicrohttpd (http://www.gnu.org/software/libmicrohttpd/) is used
as a HTTP server. Also pugixml (http://pugixml.org/) is provided for XML parsing
and manupulation.


MicroRestD API Reference
========================

The MicroRestD library is contained in ufal::microrestd namespace, including
both libmicrohttpd (http://www.gnu.org/software/libmicrohttpd/) and pugixml
(http://pugixml.org/) libraries.

The MicroRestD API is available through the microrestd.h header. To compile
MicroRestD, include the Makefile.include makefile, compile the sources listed in
MICRORESTD_OBJECTS variable and link the libraries listed in either
MICRORESTD_LIBRARIES_POSIX or MICRORESTD_LIBRARIES_WIN depending on the
operating system.


Structure string_piece
----------------------

  struct string_piece {
    const char* str;
    size_t len;

    string_piece();
    string_piece(const char* str);
    string_piece(const char* str, size_t len);
    string_piece(const std::string& str);
  }

The string_piece is used for efficient string passing. The string referenced in
string_piece is not owned by it, so users have to make sure the referenced
string exists as long as the string_piece.


Class response_generator
------------------------

  class response_generator {
   public:
    virtual ~response_generator() {}

    virtual bool generate() = 0;
    virtual string_piece current() const = 0;
    virtual void consume(size_t length) = 0;
  };

The response_generator abstract class defines an interface of progressive
response generator.


response_generator::generate
----------------------------

  virtual bool generate() = 0;

Try generating more response data. Returns false if there are no more data to be
generated and the end of the response has been reached. It is guaranteed
generate is never called again after returning false.


response_generator::current
---------------------------

  virtual string_piece current() const = 0;

Return current response data.


response_generator::consume
---------------------------

  virtual void consume(size_t length) = 0;

Drop first length chars of the response data.

Note that when consume is called, it is guaranteed that length >= current().len
/ 2 so amortized cost of all calls to consume is at most linear in the response
size.


Class rest_request
------------------

  class rest_request {
   public:
    virtual ~rest_request() {}

    virtual bool respond(const char* content_type, string_piece body, const std::vector<std::pair<const char*, const char*>>& headers = {}) = 0;
    virtual bool respond(const char* content_type, response_generator* generator, const std::vector<std::pair<const char*, const char*>>& headers = {}) = 0;
    virtual bool respond_not_found() = 0;
    virtual bool respond_method_not_allowed(const char* comma_separated_allowed_methods) = 0;
    virtual bool respond_error(string_piece error, int code = 400) = 0;

    std::string url;
    std::string method;
    std::string body;
    std::string content_type;
    std::unordered_map<std::string, std::string> params;
  };

The rest_request class represents REST request and provides means of responding
to it.

The following variables are provided:
- url
- method
- body, possibly empty
- content_type of body, possibly empty
- params, the GET and POST parameters of the request


rest_request::respond with string_piece
---------------------------------------

  virtual bool respond(const char* content_type, string_piece body, const std::vector<std::pair<const char*, const char*>>& headers = {}) = 0;

Respond HTTP OK response with specified content_type and body.

Both the content_type and the body are copied, because the response can be sent
at any later time, even after the rest_request is destroyed.

The response has the given Content-Type HTTP header, the
Access-Control-Allow-Origin: * header, and the Connection: close header.
Additional HTTP headers can be set using the header parameter.


rest_request::respond with response_generator
---------------------------------------------

  virtual bool respond(const char* content_type, response_generator* generator, const std::vector<std::pair<const char*, const char*>>& headers = {}) = 0;

Respond HTTP OK response with specified content_type using the given
response_generator.

The response has the given Content-Type HTTP header, the
Access-Control-Allow-Origin: * header, and the Connection: close header.
Additional HTTP headers can be set using the header parameter.


rest_request::respond_not_found
-------------------------------

  virtual bool respond_not_found() = 0;

Respond HTTP Not Found.


rest_request::respond_method_not_allowed
----------------------------------------

  virtual bool respond_method_not_allowed(const char* comma_separated_allowed_methods) = 0;

Respond HTTP Method Not Allowed with supplied list of allowed methods.


rest_request::respond_error
---------------------------

  virtual bool respond_error(string_piece error, int code = 400) = 0;

Respond with specified HTTP code, text/plain content-type and specified error
body.


Class rest_service
------------------

  class rest_service {
   public:
    virtual bool handle(rest_request& req) = 0;
  };

The rest_service represents an interface of a REST service.


rest_service::handle
--------------------

  virtual bool handle(rest_request& req) = 0;

Handle the given rest_request. The return code should be the one returned by the
rest_request::respond* methods.


Class rest_server
-----------------

  class rest_server {
   public:
    void set_log_file(std::iostream* log_file, unsigned max_log_size = 0);
    void set_min_generated(unsigned min_generated);
    void set_max_connections(unsigned max_connections);
    void set_max_request_body_size(unsigned max_request_body_size);
    void set_threads(unsigned threads);
    void set_timeout(unsigned timeout);

    bool start(rest_service* service, unsigned port);
    void stop();
    bool wait_until_signalled();
  };

Main REST server class.


rest_server::set_log_file
-------------------------

  void set_log_file(iostream* log_file, unsigned max_log_size);

Log to the specified log_file. If nullptr is passed, logging is disabled. Note
that the rest_server does not close log_file on exit.

If max_log_size is nonzero, it limits the size of every logged request
parameter.

By default, logging is disabled.


rest_server::set_min_generated
------------------------------

  void set_min_generated(unsigned min_generated);

When a response_generator is used, min_generated specifies minimum buffer size
which is sent (i.e. generate is called until this many chars are produced).

Note that maximum buffer size is limited to 32kB, so reasonable maximum for
min_generated is something like 24kB.

Default value of min_generated is 1kB.


rest_server::set_max_connections
--------------------------------

  void set_max_connections(unsigned max_connections);

Limit number of maximum concurrent connections (with 0 denoting unlimited number
of connections). When this limit is reached, no more connections are accepted
until some existing requests are handled.

Default value of max_connections is 0 (i.e. unlimited).


rest_server::set_max_request_body_size
--------------------------------------

  void set_max_request_body_size(unsigned max_request_body_size);

Limit the maximum request body size (with 0 denoting no size limit).

Default value of max_request_body_size is 0 (i.e. unlimited).


rest_server::set_threads
------------------------

  void set_threads(unsigned threads);

Set number of concurrently running REST server threads. If the value 0 is used,
there is one listening thread and each request is handled by a new thread. If a
nonzero value t is used, there are t threads each listening and processing its
connections (the max_connections limit is divided equally among them in this
case).

Default value of threads is 0 (i.e. each request gets a new thread).


rest_server::set_timeout
------------------------

  void set_timeout(unsigned timeout);

Set inactivity timeout in seconds (with 0 denoting no time limit).

Default value of timeout is 0 (i.e. no timeout).


rest_server::start
------------------

  bool start(rest_service* service, unsigned port);

Try starting the specified rest_service on specified port. If the service was
successfully started, true is returned, false otherwise. The service is started
in a background thread(s), so the calling thread can continue operating.

That the socket is opened with SO_REUSEPORT on POSIX systems (and with
SO_REUSEADDR on Windows which is roughly equivalent), so multiple services can
be bound to the same port.

Note the server does not take ownership of the service.


rest_server::stop
-----------------

  void stop();

Stop running REST server. No more connections are accepted, but current
connections are handled before returning.


rest_server::wait_until_signalled
---------------------------------

  bool wait_until_signalled();

Wait until shutdown/restart is signalled. Returns false on error and true if
shutdown/restart was signalled.

On POSIX systems, receiving either SIGUSR1 signal or SIGINT (Ctrl+C) signal is
used to indicate shutdown/restart.  On Windows, console control handler
receiving Ctrl+C is used.


Class json_builder
------------------

  class json_builder {
   public:
    // Clear
    inline json_builder& clear();

    // Encode
    inline json_builder& object();
    inline json_builder& array();
    inline json_builder& key(string_piece str);
    inline json_builder& value(string_piece str, bool append = false);
    inline json_builder& value_xml_escape(string_piece str, bool append = false);
    inline json_builder& indent();
    inline json_builder& close();
    inline json_builder& finish(bool indent = false);

    // Return current json
    inline string_piece current() const;
    inline operator string_piece() const;

    // Remove current json prefix; for response_generator
    void discard_current_prefix(size_t length);

    // JSON mime
    static const char* mime;
  };

The json_builder class is a simple JSON generator. The output is buffered, so
either whole JSON can be produced, or any already generated JSON prefix can be
discarded (which is used in response_generator and json_response_generator).

Most methods return the current object, so they can be chained like
json.object().key("id").value("42").close().

By default, no additional spaces or newlines are present in the generated JSON,
but can be added using the indent method.


json_builder::clear
-------------------

  inline json_builder& clear();

Clear the already generated JSON.


json_builder::object
--------------------

  inline json_builder& object();

Start a JSON object.


json_builder::array
-------------------

  inline json_builder& array();

Start a JSON array.


json_builder::key
-----------------

  inline json_builder& key(string_piece str);

Add an object key to the generated JSON.


json_builder::value
-------------------

  inline json_builder& value(string_piece str, bool append = false);

Add a value (either an array element or value of a key in an object) to the
generated JSON. If append is true and the last generated element of the JSON was
a value, append to that value instead of adding a new value.


json_builder::value_xml_escape
------------------------------

  inline json_builder& value_xml_escape(string_piece str, bool append = false);

Perform XML escaping on the given value and add it to the generated JSON. This
method is useful if a XML is being embedded in the JSON and it needs to be
escaped.

If append is true and the last generated element of the JSON was a value, append
to that value instead of adding a new value.


json_builder::indent
--------------------

  inline json_builder& indent();

Add indent to the generated JSON. It generally appends a newline and then a
space for each opened object/array, but if it is called after an object key it
only adds a space and when it is used before a close it adds one less space.


json_builder::close
-------------------

  inline json_builder& close();

Close the newest opened object or array.


json_builder::finish
--------------------

  inline json_builder& finish(bool indent = false);

Close all opened arrays and objects (calling indent before every one if
requested) and then append a newline after the finished JSON.

Note that finish call is not mandatory, it is needed only when newline after the
generated JSON is required.


json_builder::current
---------------------

  inline string_piece current() const;

Returns the current generated JSON (without the prefixes discarded via
discard_current_prefix).


json_builder::operator string_piece
-----------------------------------

  inline operator string_piece() const;

Returns the current generated JSON (without the prefixes discarded via
discard_current_prefix).


json_builder::discard_current_prefix
------------------------------------

  void discard_current_prefix(size_t length);

Discard generated JSON prefix of specified length.


Class json_response_generator
-----------------------------

  class json_response_generator : public response_generator {
   public:
    virtual string_piece current() const override;
    virtual void consume(size_t length) override;

    json_builder json;
    static const char* mime;
  };

The json_response_generator class provides a response_generator implementation
producing a JSON response using a json_builder.

The only method required to be implemented is the
response_generator``::``generate, which should append to the json field.


Class xml_builder
-----------------

  // Declarations
  class xml_builder {
   public:
    // Clear
    inline xml_builder& clear();

    // XML declaration
    xml_builder& declaration();

    // Encode
    inline xml_builder& element(string_piece name);
    inline xml_builder& attribute(string_piece name, string_piece value);
    inline xml_builder& text(string_piece str);
    inline xml_builder& indent();
    inline xml_builder& close();
    inline xml_builder& finish(bool indent = false);

    // Return current xml
    inline string_piece current() const;
    inline operator string_piece() const;

    // Remove current xml prefix; for response_generator
    void discard_current_prefix(size_t length);

    // XML mime
    static const char* mime;
  };

The xml_builder class is a simple XML generator. The output is buffered, so
either whole XML can be produced, or any already generated XML prefix can be
discarded (which is used in response_generator and xml_response_generator).

Most methods return the current object, so they can be chained like
xml.element("div").attribute("class","alert").text("Alert").close().

By default, no additional spaces or newlines are present in the generated XML,
but can be added using the indent method.


xml_builder::clear
------------------

  inline xml_builder& clear();

Clear the already generated XML.


xml_builder::declaration
------------------------

  xml_builder& declaration();

Append the following a simple XML 1.0 declaration to the document:
  <?xml version="1.0"?>


xml_builder::element
--------------------

  inline xml_builder& element(string_piece name);

Append the specified element to the generated XML.


xml_builder::attribute
----------------------

  inline xml_builder& attribute(string_piece name, string_piece value);

Append the given attribute to the last generated element, assuming it has not
been closed and no text was added to it. Otherwise, the call is ignored.


xml_builder::text
-----------------

  inline xml_builder& text(string_piece str);

Add text (pcdata) to the last generated opened element.


xml_builder::indent
-------------------

  inline xml_builder& indent();

Add indent to the generated XML. It generally appends a newline and then a space
for each opened element, but if it is used before a close it adds one less
space.


xml_builder::close
------------------

  inline xml_builder& close();

Close the last generated opened element.


xml_builder::finish
-------------------

  inline xml_builder& finish(bool indent = false);

Close all opened elements (calling indent before every one if requested) and
then append a newline after the finished XML.

Note that finish call is not mandatory, it is needed only when newline after the
generated XML is required.


xml_builder::current
--------------------

  inline string_piece current() const;

Returns the current generated XML (without the prefixes discarded via
discard_current_prefix).


xml_builder::operator string_piece
----------------------------------

  inline operator string_piece() const;

Returns the current generated XML (without the prefixes discarded via
discard_current_prefix).


xml_builder::discard_current_prefix
-----------------------------------

  void discard_current_prefix(size_t length);

Discard generated XML prefix of specified length.


Class xml_response_generator
----------------------------

  class xml_response_generator : public response_generator {
   public:
    virtual string_piece current() const override;
    virtual void consume(size_t length) override;

    xml_builder xml;
    static const char* mime;
  };

The xml_response_generator class provides a response_generator implementation
producing a XML response using a xml_builder.

The only method required to be implemented is the
response_generator``::``generate, which should append to the xml field.


Structure version
-----------------

  struct version {
    unsigned major;
    unsigned minor;
    unsigned patch;
    std::string prerelease;

    // Returns current version.
    static version current();
  };

The version class represents MicroRestD version according to Semantic Versioning
(http://semver.org/).


version::current
----------------

  static version current();

Returns current MicroRestD version.


Pugixml
=======

The pugixml (http://pugixml.org/) library 1.5 is available through the pugixml.h
header. The source files MICRORESTD_PUGIXML_OBJECTS must be compiled in order to
use the library.

Note that there are some minor modifications to the original pugixml
(http://pugixml.org/) library:
- The library is available in ufal::microrestd::pugixml namespace instead of
  the original pugixml.
- STL and XPATH modules of the original library are not available.
- The element and attribute matching ignores any XML namespaces used.
